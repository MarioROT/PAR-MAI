(define (domain puzzlegame)
    (:requirements :strips :adl)
    (:predicates
        (tile ?x)
        (position ?x)
        (at ?t ?x ?y)
        (blank ?x ?y)
        (inc ?p ?pp)
        (dec ?p ?pp)
    )
    (:action move-up
        :parameters (?t ?px ?py ?by)
        :precondition (and (tile ?t) (position ?px) (position ?py) (position ?by)
                           (at ?t ?px ?py) (blank ?px ?by) (inc ?by ?py))
        :effect (and (at ?t ?px ?by) (blank ?px ?py) (not (at ?t ?px ?py)) (not (blank ?px ?by)))
    )
    (:action move-down
        :parameters (?t ?px ?py ?by)
        :precondition (and (tile ?t) (position ?px) (position ?py) (position ?by)
                           (at ?t ?px ?py) (blank ?px ?by) (dec ?by ?py))
        :effect (and (at ?t ?px ?by) (blank ?px ?py) (not (at ?t ?px ?py)) (not (blank ?px ?by)))
    )
    (:action move-right
        :parameters (?t ?px ?py ?bx)
        :precondition (and (tile ?t) (position ?px) (position ?py) (position ?bx)
                           (at ?t ?px ?py) (blank ?bx ?py) (dec ?bx ?px))
        :effect (and (at ?t ?bx ?py) (blank ?px ?py) (not (at ?t ?px ?py)) (not (blank ?bx ?py)))
    )
    (:action move-left
        :parameters (?t ?px ?py ?bx)
        :precondition (and (tile ?t) (position ?px) (position ?py) (position ?bx)
                           (at ?t ?px ?py) (blank ?bx ?py) (inc ?bx ?px))
        :effect (and (at ?t ?bx ?py) (blank ?px ?py) (not (at ?t ?px ?py)) (not (blank ?bx ?py)))
    )
)